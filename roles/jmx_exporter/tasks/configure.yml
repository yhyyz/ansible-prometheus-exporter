---
- block:
    - name: Create jvm_exporter config directory
      file:
        path: "/etc/jvm_exporter"
        state: directory
        owner: root
        group: root
        mode: u+rwX,g+rwX,o=rX
    - name: Get node run jps
      shell: "cat /mnt/var/lib/info/extraInstanceData.json|jq .{{ item }}"
      args:
        warn: false
      register: __node_run_jps
      with_items:
        - "runNameNode"
        - "runDataNode"
        - "runResourceManager"
        - "runNodeManager"
      tags:
        - node_run_jps
    - name: Copy the namenode jmx config file
      template:
        src: hdfs_nn_jmx_config.yaml.j2
        dest: /etc/jvm_exporter/hdfs_nn_jmx_config.yaml
        owner: root
        group: root
        mode: 0644
      register: nn_jmx_conf
      when: __node_run_jps.results[0].stdout == "true"
#    - debug: var=nn_jmx_conf

    - name: Copy the datanode jmx config file
      template:
        src: hdfs_dn_jmx_config.yaml.j2
        dest: /etc/jvm_exporter/hdfs_dn_jmx_config.yaml
        owner: root
        group: root
        mode: 0644
      register: dn_jmx_conf
      when: __node_run_jps.results[1].stdout == "true"
#    - debug: var=dn_jmx_conf
    - name: Copy the resourcemanager jmx config file
      template:
        src: yarn_rm_jmx_config.yaml.j2
        dest: /etc/jvm_exporter/yarn_rm_jmx_config.yaml
        owner: root
        group: root
        mode: 0644
      register: rm_jmx_conf
      when: __node_run_jps.results[2].stdout == "true"

    - name: Copy the nodemanager jmx config file
      template:
        src: yarn_nm_jmx_config.yaml.j2
        dest: /etc/jvm_exporter/yarn_nm_jmx_config.yaml
        owner: root
        group: root
        mode: 0644
      register: nm_jmx_conf
      when: __node_run_jps.results[3].stdout == "true"

- name: add java opts to namenode
  blockinfile:
    path: /etc/hadoop/conf/hadoop-env.sh
    marker: "#{mark} ANSIBLE MANAGED BLOCK NAMENODE"
    block: |
      export HDFS_NAMENODE_OPTS="${HDFS_NAMENODE_OPTS} -javaagent:{{ _jmx_exporter_jar_install_dir }}/{{ jmx_exporter_signature }}={{jmx_nn_prometheus_port}}:/etc/jvm_exporter/hdfs_nn_jmx_config.yaml"
  notify:
    - restart namenode
    - tag instance
    - tag nn instance
#  changed_when: true
  when: "'skipped' not in nn_jmx_conf"

- name: add java opts to datanode
  blockinfile:
    path: /etc/hadoop/conf/hadoop-env.sh
    marker: "#{mark} ANSIBLE MANAGED BLOCK DATANODE"
    block: |
      export HDFS_DATANODE_OPTS="${HDFS_DATANODE_OPTS} -javaagent:{{ _jmx_exporter_jar_install_dir }}/{{ jmx_exporter_signature }}={{jmx_dn_prometheus_port}}:/etc/jvm_exporter/hdfs_dn_jmx_config.yaml"
  notify:
    - restart datanode
    - tag instance
    - tag dn instance
#  changed_when: true
  when: "'skipped' not in dn_jmx_conf"

- name: add java opts to resourcemanager
  blockinfile:
    path: /etc/hadoop/conf/yarn-env.sh
    marker: "#{mark} ANSIBLE MANAGED BLOCK REOSURCEMANAGER"
    block: |
      export YARN_RESOURCEMANAGER_OPTS="${YARN_RESOURCEMANAGER_OPTS} -javaagent:{{ _jmx_exporter_jar_install_dir }}/{{ jmx_exporter_signature }}={{jmx_rm_prometheus_port}}:/etc/jvm_exporter/yarn_rm_jmx_config.yaml"
  notify:
    - restart resourcemanager
    - tag rm instance
#  changed_when: true
  when:  "'skipped' not in rm_jmx_conf"

- name: add java opts to nodemanager
  blockinfile:
    path: /etc/hadoop/conf/yarn-env.sh
    marker: "#{mark} ANSIBLE MANAGED BLOCK NODEMANAGER"
    block: |
      export YARN_NODEMANAGER_OPTS="${YARN_NODEMANAGER_OPTS} -javaagent:{{ _jmx_exporter_jar_install_dir }}/{{ jmx_exporter_signature }}={{jmx_nm_prometheus_port}}:/etc/jvm_exporter/yarn_nm_jmx_config.yaml"
  notify:
    - restart nodemanager
    - tag nm instance
#  changed_when: true
  when: "'skipped' not in nm_jmx_conf"
